package Sesion02.Retos.Reto02;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

public class Main {
    public static void main(String[] args){
        System.out.println("üöÄ Iniciando simulaci√≥n de uso de recursos m√©dicos...");
        
        RecursoMedico salaU = new RecursoMedico("Sala Urgencias");
        RecursoMedico salaF = new RecursoMedico("Sala de Fisioterapia");

        ExecutorService executor = Executors.newFixedThreadPool(4); 

        // Tareas para la Sala de Urgencia
        executor.submit(new SalaUrgencias("Dra. S√°nchez", salaU));
        executor.submit(() -> salaU.usar("Dr. Garc√≠a")); // Lambda para Dr. Garc√≠a
        executor.submit(new SalaUrgencias("Enf. L√≥pez", salaU));
        executor.submit(() -> salaU.usar("Dr. Mart√≠nez"));
        executor.submit(new SalaUrgencias("Dra. P√©rez", salaU));
        executor.submit(() -> salaU.usar("Enf. Ruiz"));

        // Tareas para la Sala de Fisioterapia
        executor.submit(new SalaFisioterapia("Dr. Fern√°ndez", salaF));
        executor.submit(() -> salaF.usar("Tec. Morales"));
        executor.submit(new SalaFisioterapia("Dra. Vargas", salaF));

        executor.shutdown();

        try {
            if (!executor.awaitTermination(10, TimeUnit.SECONDS)) {
                System.err.println("‚ùå Las tareas no terminaron en el tiempo especificado. Forzando el cierre.");
                executor.shutdownNow(); // Intenta cancelar las tareas en ejecuci√≥n
            }
        } catch (InterruptedException e) {
            System.err.println("‚ùå Espera de terminaci√≥n de tareas interrumpida.");
            executor.shutdownNow(); // Forzar el cierre si es interrumpido
        }

        System.out.println("\n‚úÖ Simulaci√≥n de uso de recursos finalizada.");

    }
}
